// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	entity "CodeWithAzri/internal/app/module/course/entity"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// CourseRepository is an autogenerated mock type for the CourseRepository type
type CourseRepository struct {
	mock.Mock
}

type CourseRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *CourseRepository) EXPECT() *CourseRepository_Expecter {
	return &CourseRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: e
func (_m *CourseRepository) Create(e entity.Course) error {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Course) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CourseRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type CourseRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - e entity.Course
func (_e *CourseRepository_Expecter) Create(e interface{}) *CourseRepository_Create_Call {
	return &CourseRepository_Create_Call{Call: _e.mock.On("Create", e)}
}

func (_c *CourseRepository_Create_Call) Run(run func(e entity.Course)) *CourseRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.Course))
	})
	return _c
}

func (_c *CourseRepository_Create_Call) Return(_a0 error) *CourseRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CourseRepository_Create_Call) RunAndReturn(run func(entity.Course) error) *CourseRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *CourseRepository) Delete(id uuid.UUID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CourseRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type CourseRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *CourseRepository_Expecter) Delete(id interface{}) *CourseRepository_Delete_Call {
	return &CourseRepository_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *CourseRepository_Delete_Call) Run(run func(id uuid.UUID)) *CourseRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *CourseRepository_Delete_Call) Return(_a0 error) *CourseRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CourseRepository_Delete_Call) RunAndReturn(run func(uuid.UUID) error) *CourseRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// ReadMany provides a mock function with given fields: limit, offset
func (_m *CourseRepository) ReadMany(limit int, offset int) ([]entity.Course, error) {
	ret := _m.Called(limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ReadMany")
	}

	var r0 []entity.Course
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]entity.Course, error)); ok {
		return rf(limit, offset)
	}
	if rf, ok := ret.Get(0).(func(int, int) []entity.Course); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Course)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CourseRepository_ReadMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadMany'
type CourseRepository_ReadMany_Call struct {
	*mock.Call
}

// ReadMany is a helper method to define mock.On call
//   - limit int
//   - offset int
func (_e *CourseRepository_Expecter) ReadMany(limit interface{}, offset interface{}) *CourseRepository_ReadMany_Call {
	return &CourseRepository_ReadMany_Call{Call: _e.mock.On("ReadMany", limit, offset)}
}

func (_c *CourseRepository_ReadMany_Call) Run(run func(limit int, offset int)) *CourseRepository_ReadMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *CourseRepository_ReadMany_Call) Return(_a0 []entity.Course, _a1 error) *CourseRepository_ReadMany_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CourseRepository_ReadMany_Call) RunAndReturn(run func(int, int) ([]entity.Course, error)) *CourseRepository_ReadMany_Call {
	_c.Call.Return(run)
	return _c
}

// ReadOne provides a mock function with given fields: id
func (_m *CourseRepository) ReadOne(id uuid.UUID) (entity.Course, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ReadOne")
	}

	var r0 entity.Course
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (entity.Course, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) entity.Course); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.Course)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CourseRepository_ReadOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadOne'
type CourseRepository_ReadOne_Call struct {
	*mock.Call
}

// ReadOne is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *CourseRepository_Expecter) ReadOne(id interface{}) *CourseRepository_ReadOne_Call {
	return &CourseRepository_ReadOne_Call{Call: _e.mock.On("ReadOne", id)}
}

func (_c *CourseRepository_ReadOne_Call) Run(run func(id uuid.UUID)) *CourseRepository_ReadOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *CourseRepository_ReadOne_Call) Return(_a0 entity.Course, _a1 error) *CourseRepository_ReadOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CourseRepository_ReadOne_Call) RunAndReturn(run func(uuid.UUID) (entity.Course, error)) *CourseRepository_ReadOne_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: id, e
func (_m *CourseRepository) Update(id uuid.UUID, e entity.Course) error {
	ret := _m.Called(id, e)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, entity.Course) error); ok {
		r0 = rf(id, e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CourseRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type CourseRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - id uuid.UUID
//   - e entity.Course
func (_e *CourseRepository_Expecter) Update(id interface{}, e interface{}) *CourseRepository_Update_Call {
	return &CourseRepository_Update_Call{Call: _e.mock.On("Update", id, e)}
}

func (_c *CourseRepository_Update_Call) Run(run func(id uuid.UUID, e entity.Course)) *CourseRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(entity.Course))
	})
	return _c
}

func (_c *CourseRepository_Update_Call) Return(_a0 error) *CourseRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CourseRepository_Update_Call) RunAndReturn(run func(uuid.UUID, entity.Course) error) *CourseRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewCourseRepository creates a new instance of CourseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCourseRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CourseRepository {
	mock := &CourseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
