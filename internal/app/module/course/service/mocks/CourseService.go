// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	dto "CodeWithAzri/internal/app/module/course/dto"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// CourseService is an autogenerated mock type for the CourseService type
type CourseService struct {
	mock.Mock
}

type CourseService_Expecter struct {
	mock *mock.Mock
}

func (_m *CourseService) EXPECT() *CourseService_Expecter {
	return &CourseService_Expecter{mock: &_m.Mock}
}

// GetDetailCourse provides a mock function with given fields: courseID
func (_m *CourseService) GetDetailCourse(courseID uuid.UUID) (dto.CourseDTO, error) {
	ret := _m.Called(courseID)

	if len(ret) == 0 {
		panic("no return value specified for GetDetailCourse")
	}

	var r0 dto.CourseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (dto.CourseDTO, error)); ok {
		return rf(courseID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) dto.CourseDTO); ok {
		r0 = rf(courseID)
	} else {
		r0 = ret.Get(0).(dto.CourseDTO)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(courseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CourseService_GetDetailCourse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDetailCourse'
type CourseService_GetDetailCourse_Call struct {
	*mock.Call
}

// GetDetailCourse is a helper method to define mock.On call
//   - courseID uuid.UUID
func (_e *CourseService_Expecter) GetDetailCourse(courseID interface{}) *CourseService_GetDetailCourse_Call {
	return &CourseService_GetDetailCourse_Call{Call: _e.mock.On("GetDetailCourse", courseID)}
}

func (_c *CourseService_GetDetailCourse_Call) Run(run func(courseID uuid.UUID)) *CourseService_GetDetailCourse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *CourseService_GetDetailCourse_Call) Return(_a0 dto.CourseDTO, _a1 error) *CourseService_GetDetailCourse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CourseService_GetDetailCourse_Call) RunAndReturn(run func(uuid.UUID) (dto.CourseDTO, error)) *CourseService_GetDetailCourse_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaginatedCourses provides a mock function with given fields: limit, page
func (_m *CourseService) GetPaginatedCourses(limit int, page int) ([]dto.CourseDTO, error) {
	ret := _m.Called(limit, page)

	if len(ret) == 0 {
		panic("no return value specified for GetPaginatedCourses")
	}

	var r0 []dto.CourseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]dto.CourseDTO, error)); ok {
		return rf(limit, page)
	}
	if rf, ok := ret.Get(0).(func(int, int) []dto.CourseDTO); ok {
		r0 = rf(limit, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.CourseDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CourseService_GetPaginatedCourses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaginatedCourses'
type CourseService_GetPaginatedCourses_Call struct {
	*mock.Call
}

// GetPaginatedCourses is a helper method to define mock.On call
//   - limit int
//   - page int
func (_e *CourseService_Expecter) GetPaginatedCourses(limit interface{}, page interface{}) *CourseService_GetPaginatedCourses_Call {
	return &CourseService_GetPaginatedCourses_Call{Call: _e.mock.On("GetPaginatedCourses", limit, page)}
}

func (_c *CourseService_GetPaginatedCourses_Call) Run(run func(limit int, page int)) *CourseService_GetPaginatedCourses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *CourseService_GetPaginatedCourses_Call) Return(_a0 []dto.CourseDTO, _a1 error) *CourseService_GetPaginatedCourses_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CourseService_GetPaginatedCourses_Call) RunAndReturn(run func(int, int) ([]dto.CourseDTO, error)) *CourseService_GetPaginatedCourses_Call {
	_c.Call.Return(run)
	return _c
}

// NewCourseService creates a new instance of CourseService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCourseService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CourseService {
	mock := &CourseService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
